---
import Header from "../components/Header.astro";
import DynamicIsland from "../components/DynamicIsland.astro";
import { getCollection } from "astro:content";

const items = await getCollection("projects").catch(() => []);
const projects = items.sort((a,b) => a.data.order - b.data.order);
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Projects · Luca Ficano Latimer</title>
    <meta name="description" content="Game dev and CS projects" />
    <link rel="stylesheet" href="/site.css">
    <style>
      .projects-grid{ display:grid; grid-template-columns: repeat(auto-fill, minmax(220px,1fr)); gap:16px; }
      .p-card{
        position: relative; overflow:hidden; border-radius:14px; border:1px solid var(--border);
        background: linear-gradient(180deg, rgba(15,22,36,.7), rgba(12,18,30,.9));
        box-shadow: 0 10px 30px rgba(0,0,0,.35);
        transform: translateZ(0); cursor:pointer; transition: transform .18s ease, box-shadow .18s ease, border-color .18s ease;
      }
      .p-card:hover{ transform: translateY(-3px); box-shadow: 0 16px 40px rgba(0,0,0,.45); border-color: rgba(96,165,250,.35); }
      .p-thumb{ width:100%; height:140px; object-fit:cover; display:block; }
      .p-body{ padding:12px; }
      .p-title{ font-weight:700; font-size:16px; margin:0 0 4px; }
      .p-meta{ color:rgba(200,220,255,.7); font-size:12px; margin-bottom:6px }
      .p-summary{ margin:0; font-size:13px; opacity:.9 }

      .overlay{ position:fixed; inset:0; display:none; align-items:center; justify-content:center; background: rgba(7,10,18,.6); backdrop-filter: blur(6px); -webkit-backdrop-filter: blur(6px); z-index:80; }
      .overlay.show{ display:flex }
      .modal{ width:min(900px, 92vw); border-radius:16px; border:1px solid rgba(96,165,250,.25); background: linear-gradient( to bottom right, rgba(13,20,34,.98), rgba(9,14,24,.98)); box-shadow: 0 18px 60px rgba(0,0,0,.55); transform: translateY(8px) scale(.98); opacity:0; transition: transform .18s ease, opacity .18s ease; }
      .overlay.show .modal{ transform: translateY(0) scale(1); opacity:1 }
      .modal-header{ display:flex; align-items:center; justify-content:space-between; padding:14px 16px; border-bottom:1px solid rgba(255,255,255,.06) }
      .modal-title{ font-size:18px; font-weight:700 }
      .close-btn{ background:transparent; border:1px solid var(--border); color:var(--text); border-radius:8px; padding:6px 10px; cursor:pointer }
      .close-btn:hover{ border-color: var(--accent) }
      .modal-body{ display:grid; grid-template-columns: 1.4fr 1fr; gap:16px; padding:14px 16px }
      .media{ border-radius:12px; overflow:hidden; background:#0a1120; border:1px solid rgba(255,255,255,.06); aspect-ratio:16/9 }
      .media iframe, .media video, .media img{ width:100%; height:100%; display:block; object-fit:contain; background:#000; border:0 }
      .info small{ color:rgba(200,220,255,.7) }
      .chips{ display:flex; gap:6px; flex-wrap:wrap; margin:8px 0 }
      .chip{ font-size:12px; border:1px solid var(--border); padding:4px 8px; border-radius:999px }
      .actions{ display:flex; gap:10px; margin-top:12px; flex-wrap:wrap }
      .actions a{ text-decoration:none }
      @media (max-width: 820px){ .modal-body{ grid-template-columns: 1fr; } }
    </style>
  </head>
  <body>
    <Header />
    <DynamicIsland />
    <main class="container">
      <h1>Projects</h1>
      <div class="projects-grid">
        {projects.map(p => (
          <div class="p-card" role="button" tabindex="0"
            data-title={p.data.title}
            data-year={p.data.year}
            data-summary={p.data.summary}
            data-thumb={p.data.thumb || ''}
            data-video={p.data.video || ''}
            data-live={p.data.live || ''}
            data-repo={p.data.repo || ''}
            data-stack={p.data.stack?.join(', ') || ''}
            aria-label={`Open ${p.data.title}`}
          >
            {p.data.thumb ? <img class="p-thumb" src={p.data.thumb} alt={p.data.title} /> : <div class="p-thumb" style="display:grid;place-items:center;color:rgba(200,220,255,.7)">No image</div>}
            <div class="p-body">
              <div class="p-title">{p.data.title}</div>
              <div class="p-meta">{p.data.year}{p.data.stack?.length ? ` · ${p.data.stack.join(', ')}` : ''}</div>
              <p class="p-summary">{p.data.summary}</p>
            </div>
          </div>
        ))}
      </div>
      <div class="overlay" id="p-overlay" aria-hidden="true">
        <div class="modal" role="dialog" aria-modal="true" aria-labelledby="p-title">
          <div class="modal-header">
            <div id="p-title" class="modal-title"></div>
            <button class="close-btn" id="p-close" aria-label="Close">Close</button>
          </div>
          <div class="modal-body">
            <div class="media" id="p-media"></div>
            <div class="info">
              <div style="font-weight:700; font-size:16px" id="p-year"></div>
              <div class="chips" id="p-stack"></div>
              <p id="p-summary"></p>
              <div id="p-resp"></div>
              <div class="actions">
                <a class="btn primary" id="p-live" target="_blank" rel="noreferrer" style="display:none">Play</a>
                <a class="btn" id="p-repo" target="_blank" rel="noreferrer" style="display:none">Repository</a>
                <a class="btn" id="p-open" style="display:none">Open Details</a>
              </div>
            </div>
          </div>
        </div>
      </div>
      <script>
        const overlay = document.getElementById('p-overlay');
        const mediaEl = document.getElementById('p-media');
        const tEl = document.getElementById('p-title');
        const yEl = document.getElementById('p-year');
        const sEl = document.getElementById('p-summary');
        const stEl = document.getElementById('p-stack');
        const respEl = document.getElementById('p-resp');
        const liveEl = document.getElementById('p-live');
        const repoEl = document.getElementById('p-repo');
        const openEl = document.getElementById('p-open');
        const closeEl = document.getElementById('p-close');

        function embedMedia({ video, thumb }){
          mediaEl.innerHTML = '';
          if (video) {
            const isYouTube = /youtu\.be|youtube\.com/.test(video);
            if (isYouTube){
              const iframe = document.createElement('iframe');
              iframe.src = video.includes('embed') ? video : video.replace('watch?v=','embed/');
              iframe.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share';
              iframe.allowFullscreen = true;
              mediaEl.appendChild(iframe);
              return;
            }
            if (/\.mp4$|\.webm$/.test(video)){
              const v = document.createElement('video');
              v.controls = true; v.src = video; mediaEl.appendChild(v); return;
            }
          }
          if (thumb) { const img = document.createElement('img'); img.src = thumb; img.alt=''; mediaEl.appendChild(img); }
        }

        function openModal(data){
          tEl.textContent = data.title || '';
          yEl.textContent = data.year ? String(data.year) : '';
          sEl.textContent = data.summary || '';
          stEl.innerHTML = '';
          if (data.stack){ data.stack.split(',').forEach(x=>{ const c=document.createElement('span'); c.className='chip'; c.textContent=x.trim(); stEl.appendChild(c);}); }
          respEl.innerHTML = '';
          embedMedia(data);
          if (data.live){ liveEl.style.display='inline-flex'; liveEl.href=data.live; } else { liveEl.style.display='none'; }
          if (data.repo){ repoEl.style.display='inline-flex'; repoEl.href=data.repo; } else { repoEl.style.display='none'; }
          const slug = (data.title||'').toLowerCase().replace(/[^a-z0-9]+/g,'-');
          openEl.style.display='inline-flex';
          openEl.onclick = ()=>{ window.location.href = `/projects/${slug}/`; };
          overlay.classList.add('show'); overlay.setAttribute('aria-hidden','false');
          document.body.style.overflow='hidden';
        }

        function closeModal(){ overlay.classList.remove('show'); overlay.setAttribute('aria-hidden','true'); document.body.style.overflow=''; }
        closeEl.addEventListener('click', closeModal);
        overlay.addEventListener('click', (e)=>{ if(e.target===overlay) closeModal(); });
        window.addEventListener('keydown', (e)=>{ if(e.key==='Escape') closeModal(); });

        document.querySelectorAll('.p-card').forEach(card=>{
          const data = {
            title: card.dataset.title,
            year: card.dataset.year,
            summary: card.dataset.summary,
            thumb: card.dataset.thumb,
            video: card.dataset.video,
            live: card.dataset.live,
            repo: card.dataset.repo,
            stack: card.dataset.stack
          };
          card.addEventListener('click', ()=> openModal(data));
          card.addEventListener('keydown', (e)=>{ if(e.key==='Enter' || e.key===' ') { e.preventDefault(); openModal(data);} });
        });
      </script>
    </main>
  </body>
 </html>
